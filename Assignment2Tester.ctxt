#BlueJ class context
comment0.params=
comment0.target=void\ setUp()
comment0.text=\n\ Every\ jUnit\ module\ could\ feature\ one\ of\ these\ setUp\ methods.\n\ It\ is\ run\ immediately\ before\ every\ test.\n\ We're\ using\ setUp\ to\ hijack\ console\ output\n\ and\ reset\ the\ STANDARD_TEST_SUBJECTs.\n
comment1.params=
comment1.target=void\ tearDown()
comment1.text=\n\ Like\ setUp,\ tearDown\ occurs\ for\ every\ test\ --\n\ immediately\ after\ them,\ that\ is.\n\ Since\ we\ hijacked\ console\ output\ in\ setUp,\ it\ is\ vital\n\ that\ we\ reroute\ output\ back\ to\ the\ system\ standard\ [stdOut].\n\ If\ we\ omit\ this\ step,\ the\ project\ will\ seemingly\ not\ produce\n\ output\ until\ BlueJ\ is\ closed\ and\ reopened.\n\ \n\ We're\ also\ doing\ an\ interesting\ this\ with\ subtestResults\ here.\n\ This\ instance\ variable\ works\ in\ cooperation\ with\ subtest()\ and\ process()\n\ to\ split\ any\ one\ @Test\ into\ several\ tests,\ each\ of\ which\ can\ fail()\n\ without\ preventing\ another\ subtest\ in\ the\ group\ from\ occuring.\n
comment10.params=expected
comment10.target=void\ verifyOutput(java.lang.String)
comment10.text=\n\ Call\ this\ function\ to\ assert\ that\ a\ student's\ method\n\ DID\ produce\ console\ output,\ and\ that\ output\n\ is\ exactly\ the\ same\ as\ an\ expected\ String.\n
comment11.params=classIndex\ fieldName
comment11.target=java.lang.Object\ getFieldValue(int,\ java.lang.String)
comment11.text=\n\ This\ function\ will\ read\ an\ instance\ variable's\ contained\n\ value\ even\ if\ that\ variable\ is\ normally\ shielded\ from\n\ outside\ observation\ (with\ the\ 'private'\ access\ keyword.\n\ Okay,\ that\ may\ defeat\ one\ of\ the\ purposes\ of\ class\ structure,\n\ but\ we\ need\ some\ empirical\ means\ to\ determine\ your\ object\ state.\n\ How\ could\ I\ possibly\ trust\ that\ your\ getters\ will\ return\n\ the\ underlying\ value?\ \ Everything\ other\ than\ the\ value\ itself\n\ can\ be\ impersonated\ or\ misrepresented.\n
comment12.params=classIndex\ fieldName\ proposedValue
comment12.target=void\ setFieldValue(int,\ java.lang.String,\ java.lang.Object)
comment12.text=\n\ Change\ an\ object's\ instance\ variable\ to\ hold\ a\ desired\n\ test\ value.\ \ Normally\ constructors\ or\ setters\ would\ do\ this,\n\ but\ again,\ tests\ need\ a\ means\ to\ establish\ a\ "control"\ condition.\n\ (That's\ one\ that\ you\ know\ cannot\ be\ corrupted\ from\ other\ coders'\ efforts.)\n
comment13.params=expectedValue\ actualValue\ failReason
comment13.target=void\ verifyResult(java.lang.Object,\ java.lang.Object,\ java.lang.String)
comment13.text=\n\ A\ common\ means\ to\ perform\ an\ assertion\ that\ works\ in\ our\ grading,\n\ class\ name,\ and\ method\ or\ field\ name.\n\ \#lastClass\ and\ \#lastReflection\ are\ set\ by\ runMethod()\ and\ getFieldValue().\n\ @param\ expectedValue\ \ \ \ \ a\ standard,\ fixed\ content\ to\ check\ against\n\ @param\ actualValue\ \ \ \ \ \ \ value\ generated\ by\ the\ student\ to\ compare\ to\ expectedValue\n\ @param\ failReason\ \ \ \ \ \ \ \ if\ expectedValue\ \!\=\ actualValue,\ this\ is\ the\ asserted\ explanation\n
comment14.params=expectedValue\ actualValue
comment14.target=void\ verifyResult(java.lang.Object,\ java.lang.Object)
comment15.params=classIndex\ fieldName\ expectedValue
comment15.target=void\ verifyFieldValue(int,\ java.lang.String,\ java.lang.Object)
comment15.text=\n\ This\ function\ is\ an\ attempt\ to\ make\ a\ common\ test\n\ into\ a\ repeatable,\ consistent\ behavior.\n\ It\ checks\ to\ see\ if\ an\ object's\ instance\ variable\n\ matches\ an\ expectation\ and\ deducts\ a\ fixed\ amount\ of\ points\n\ when\ the\ test\ is\ failed.\n
comment16.params=classIndex\ fieldName\ expectedType\ mandatoryModifiers
comment16.target=java.lang.reflect.Field\ validateMember(int,\ java.lang.String,\ java.lang.Class,\ int)
comment16.text=\n\ Validating\ a\ field,\ in\ this\ context,\ is\ different\ from\ validating\ its\ value.\n\ I'm\ ensuring\ that\ the\ instance\ variable\ has\ the\ expected\ variable\ type,\n\ and\ above\ all,\ that\ the\ field\ exists\ in\ the\ first\ place.\n
comment17.params=classIndex\ fieldName\ expectedType
comment17.target=java.lang.reflect.Field\ validateMember(int,\ java.lang.String,\ java.lang.Class)
comment17.text=\n\ Most\ field\ validations\ will\ not\ include\ the\ mandatoryModifiers\ parameter.\n\ @see\ \#validateField(int,\ String,\ Class<?>,\ int)\n
comment18.params=classIndex\ fieldName\ expectedType
comment18.target=void\ validateField(int,\ java.lang.String,\ java.lang.Class)
comment18.text=\n\ In\ addition\ to\ validating\ a\ field\ (see\ previous\ function),\n\ it\ is\ important\ to\ establish\ that\ it\ was\ given\ a\ non-public\ access\ keyword.\n\ If\ a\ person\ does\ not\ put\ the\ word\ "private"\ or\ "protected"\ before\n\ an\ instance\ variable,\ that\ variable\ gains\ "package-private"\ status,\n\ which\ means\ that\ if\ a\ new\ class\ is\ written\ into\ the\ same\ folder,\n\ then\ the\ new\ class\ can\ see\ into\ your\ project\ as\ if\ your\ variables\ were\ public.\n\ That's\ very\ insecure.\n
comment19.params=classIndex\ fieldName\ expectedType\ expectedValue
comment19.target=void\ validateConstant(int,\ java.lang.String,\ java.lang.Class,\ java.lang.Object)
comment19.text=\n\ Constants\ are\ essentially\ the\ same\ as\ fields,\n\ but\ they\ belong\ to\ the\ class\ (are\ 'static')\n\ and\ they\ usually\ aren't\ protected.\n\ A\ private\ constant\ is\ used\ descriptive\ purposes,\n\ and\ a\ public\ one\ is\ used\ as\ a\ potential\ parameter\ from\ the\ outside,\n\ but\ what\ would\ protected\ mean?\ \ It\ makes\ no\ sense.\n
comment2.params=classIndex\ initargs
comment2.target=java.lang.Object\ worryFreeNew(int,\ java.lang.Object[])
comment2.text=\n\ worryFreeNew\ is\ the\ core\ idea\ of\ James\ Pede\ designed\ testing\ modules.\n\ It\ uses\ class\ INDEXES\ to\ replace\ class\ names\ as\ code.\n\ Why\ do\ that?\ \ Well,\ if\ I\ were\ to\ create\ your\ project's\ objects\n\ by\ naming\ those\ classes\ directly,\ the\ classes\ would\ definitely\n\ have\ to\ exist\ first.\ \ Normally,\ invocation\ of\ a\ non-existant\ class\n\ causes\ a\ compiler\ error.\ \ However,\ this\ tester\ does\ everything\ possible\n\ to\ avoid\ compiler-based\ dependencies.\ \ This\ allows\ a\ larger\ percentage\n\ of\ projects\ to\ be\ evaluated\ while\ incomplete\ ...\ which\ is\ not\n\ only\ awesome\ as\ a\ side-by-side\ development\ tool,\ but\ ensures\ that\n\ students\ don't\ get\ zero\ if\ they\ wrote\ and\ submitted\ *something*.\n
comment20.params=s\ pattern
comment20.target=java.util.Stack\ scanIntoStack(java.util.Scanner,\ java.lang.String)
comment20.text=\n\ Regular\ Expressions\ are\ capable\ of\ returning\ several\ matches,\n\ but\ there's\ this\ multi-step\ process\ that\ doesn't\ produce\ tidy\ results.\n\ I've\ created\ this\ helper\ method\ for\ testJavadoc()\n\ so\ that\ the\ process\ is\ condensed\ and\ reusable.\n\ @param\ s\ \ \ \ \ \ \ \ \ a\ Scanner\ object,\ which\ is\ wrapping\ and\ streaming\ some\ String-based\ source;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ is\ where\ the\ {pattern}\ will\ be\ found\n\ @param\ pattern\ \ \ the\ Regular\ Expression\ matching\ string;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ look\ up\ RegEx\ on\ the\ Internet\ --\ it's\ complicated,\ but\ important\n\ @return\ \ \ \ \ \ \ \ \ \ Stack\ of\ matches;\ it\ was\ most\ convenient\ to\ organize\ first-in-last-out\n
comment21.params=file
comment21.target=void\ parseJavadoc(java.io.File)
comment21.text=\n\ This\ beautiful\ monstrosity\ is\ a\ file\ parser\ that\ finds\ methods\n\ and\ compares\ their\ parameters\ to\ preceding\ javadoc.\n\ Students\ will\ be\ advised\ if\ there\ is\ an\ undocumented\ parameter.\n\ In\ the\ case\ of\ even\ one\ mistake,\ the\ preferred\ style\ will\ be\ detailed.\n\ \n\ Since\ this\ technology\ is\ 'in\ the\ neighborhood',\n\ it\ also\ verifies\ that\ class\ headers\ are\ not\ left\ as\ the\ IDE-generated\n\ default,\ and\ that\ return\ values\ are\ also\ documented\ to\ standard.\n\ \n\ Assumptions/Weaknesses\ of\ algorithm\:\n\ -\ Blocks\ are\ begun\ where\ opening\ braces\ come\ at\ the\ end\ of\ a\ line.\n\ \ \ \ \ \ (Could\ be\ false\ if\ a\ student\ begins\ code\ and\ block\ in\ the\ same\ line.\n\ \ \ \ \ \ This\ would\ be\ a\ practice\ that\ we'd\ like\ to\ discourage\ anyway.)\n\ -\ Multiline\ comments\ don't\ end\ a\ line\ with\ an\ opening\ brace.\n\ \ \ \ \ \ (The\ only\ reason\ I\ can\ predict\ this\ happening\ is\ if\n\ \ \ \ \ \ someone\ had\ a\ code\ sample\ in\ javadoc.\ \ Possible.\ \ Unlikely?)\n\ -\ Class\ names\ and\ method\ names\ don't\ have\ numbers\ in\ them.\n
comment22.params=file
comment22.target=void\ seekBonusRequest(java.io.File)
comment22.text=\n\ Include\ the\ word\ "bonus"\ in\ code\ commentary,\ and\ explain\ why\ you\ earned\ extra\ marks.\n\ If\ the\ evaluator\ agrees\ with\ this\ solicitation,\ percentage\ points\ --\n\ independent\ of\ the\ assignment's\ distributed\ grade\ --\ will\ be\ added\ to\ the\ score.\n\ One\ nice\ side\ effect\ of\ this\ offer\ is\ that\ the\ seeking\ mechanism\n\ discovers\ and\ highlights\ this\ comment\ block\ right\ here\!\ \:-D\n
comment23.params=license
comment23.target=void\ constructCar(java.lang.String)
comment23.text=\n\ I\ needed\ something\ that\ condensed\ the\ clunky\ worryFreeNew()\n\ creation\ technique\ into\ something\ easier\ to\ read.\n\ The\ newly\ created\ Car\ is\ stored\ in\ the\ STANDARD_TEST_SUBJECT.\n
comment24.params=
comment24.target=java.lang.Object\ constructTicket()
comment24.text=\n\ Same\ as\ previous,\ but\ for\ tickets.\n\ We\ don't\ want\ the\ result\ to\ be\ stored\ in\ STANDARD_TEST_SUBJECT.\n\ @return\ \ \ \ \ \ newly\ created\ ParkingTicket\n
comment25.params=
comment25.target=void\ initializeTicketsIfNecessary()
comment25.text=\n\ The\ STANDARD_TEST_SUBJECT\ for\ TICKET\ couldn't\ be\ set\n\ in\ the\ static\ initializer.\ \ Not\ sure\ why,\ really.\ \ Some\ timing\ thing.\n\ This\ method\ is\ called\ by\ all\ tests\ that\ will\ be\ using\ a\ ParkingTicket\n\ to\ ensure\ that\ a\ live\ object\ of\ this\ type\ is\ available.\n\ THIRTEENTH_TICKET\ is\ created\ here\ as\ well.\n\ Also,\ if\ all\ the\ tickets\ have\ been\ prepared\ previously,\n\ it's\ still\ important\ to\ establish\ that\ lastReflection\ would\ have\ been\n\ "checkParking()".\n
comment26.params=
comment26.target=void\ javadocJAVADOCjavadoc()
comment27.params=
comment27.target=void\ didSomeoneSayBONUS()
comment28.params=
comment28.target=void\ allFieldsExist()
comment29.params=
comment29.target=void\ allConstantsExist()
comment3.params=classIndex\ methodName\ parameters
comment3.target=java.lang.Object\ runMethodVarArgVersion(int,\ java.lang.String,\ java.lang.Object[])
comment3.text=\n\ Where\ worryFreeNew()\ allows\ me\ to\ create\ objects\ without\ encoding\ their\ classnames,\n\ runMethodVarArgVersion()\ allows\ me\ to\ run\ objects'\ methods\ without\ the\ requirement\n\ that\ those\ methods\ actually\ exist.\ \ Again,\ this\ is\ so\ that\ the\ tester\ doesn't\n\ gain\ a\ dependency\ on\ testable\ classes\ that\ may\ not\ be\ complete.\n\ @param\ classIndex\ \ \ \ a\ numerical\ ID\ for\ a\ class,\ unique\ to\ this\ test\ module\n\ @param\ methodName\ \ \ \ a\ behavior\ in\ the\ identified\ class,\ which\ we\ wish\ to\ invoke\n\ @param\ parameters\ \ \ \ boundless\ array\ of\ inputs\ into\ the\ method\ we\ wish\ to\ invoke\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ whatever\ value\ the\ invoked\ method\ would\ normally\ return\n
comment30.params=
comment30.target=void\ carConstructorSetsDefaults()
comment31.params=
comment31.target=void\ carConstructorAcceptsGoodData()
comment32.params=
comment32.target=void\ carConstructorAcceptsNullLicense()
comment33.params=
comment33.target=void\ carConstructorRejectsBadLicense()
comment34.params=
comment34.target=void\ carLicenseAcceptsGoodData()
comment35.params=
comment35.target=void\ carLicenseAcceptsNull()
comment36.params=
comment36.target=void\ carLicenseRejectsBadData()
comment37.params=
comment37.target=void\ carTransmissionAcceptsGoodData()
comment38.params=
comment38.target=void\ carTransmissionRejectsBadData()
comment39.params=
comment39.target=void\ carOdometerReads50000Point5ByDefault()
comment4.params=classIndex\ methodName
comment4.target=java.lang.Object\ runMethod(int,\ java.lang.String)
comment4.text=\n\ Overloaded\ version\ of\ runMethodVarArgVersion()\ that\ runs\n\ a\ parameter-less\ method.\ \ This\ is\ kind\ of\ a\ hack.\n\ Java\ produces\ warnings\ when\ one\ tries\ to\ use\ variable-length\ parameter\ lists,\n\ and\ I\ don't\ want\ students\ to\ be\ troubled\ with\ messages\ that\ are\ way\ beyond\n\ their\ learning\ curriculum.\n
comment40.params=
comment40.target=void\ carOdometerReads48151Point6WhenChanged()
comment41.params=
comment41.target=void\ carIsNotUsuallyParked()
comment42.params=
comment42.target=void\ carIsParkedWhenDurationNotZero()
comment43.params=
comment43.target=void\ carParkAcceptsGoodData()
comment44.params=
comment44.target=void\ carParkRejectsBadData()
comment45.params=
comment45.target=void\ meterMinutesPaidWorks()
comment46.params=
comment46.target=void\ carMinutesAccessorWorks()
comment47.params=
comment47.target=void\ meterAddMinutesPaidWorks()
comment48.params=
comment48.target=void\ ticketApprovedWhenOverparked()
comment49.params=
comment49.target=void\ ticketDeniedWhenExactlyParked()
comment5.params=classIndex\ methodName\ parameter
comment5.target=java.lang.Object\ runMethod(int,\ java.lang.String,\ java.lang.Object)
comment5.text=\n\ Overloaded\ version\ of\ runMethodVarArgVersion()\ that\ runs\n\ a\ single-parameter\ method.\ \ I\ guess\ you\ can\ see\ the\ pattern\ here.\n\ If\ we\ had\ reason\ to\ believe\ your\ project\ has\ two-\ or\ three-parameter\n\ methods\ in\ it,\ we'd\ need\ a\ few\ more\ versions\ of\ runMethod().\n
comment50.params=
comment50.target=void\ ticketDeniedWhenUnderparked()
comment51.params=overparkMagnitude\ expectedFine
comment51.target=void\ performCalculateFineTest(int,\ double)
comment52.params=
comment52.target=void\ ticketCalculatesPreHour()
comment53.params=
comment53.target=void\ ticketCalculatesOnHour()
comment54.params=
comment54.target=void\ ticketCalculatesPostHour()
comment55.params=
comment55.target=void\ ticketCalculatesPiHour()
comment56.params=
comment56.target=void\ ticketCalculatesNegativeMeaningOfLife()
comment57.params=
comment57.target=void\ ticketCalculatesNegativeThreeHalfHours()
comment58.params=
comment58.target=void\ ticketReferenceChecksOut1Time()
comment59.params=
comment59.target=void\ ticketReferenceChecksOut13Times()
comment6.params=classIndex\ methodName\ param1\ param2
comment6.target=java.lang.Object\ runMethod(int,\ java.lang.String,\ java.lang.Object,\ java.lang.Object)
comment6.text=\n\ Overloaded\ version\ of\ runMethodVarArgVersion()\ that\ runs\n\ a\ double-parameter\ method.\ \ Looks\ like\ my\ prediction\ came\ true.\n
comment60.params=
comment60.target=void\ ticketDetailsLessThanAnHourInfraction()
comment61.params=
comment61.target=void\ ticketDetailsExactlyOneHourInfraction()
comment62.params=
comment62.target=void\ ticketClassVariablesExist()
comment63.params=
comment63.target=void\ ticketFieldsExist()
comment64.params=
comment64.target=void\ isBackwardsCompatible()
comment65.params=
comment65.target=void\ ticketConstructorsWork()
comment7.params=methodName
comment7.target=Assignment2Tester\ subtest(java.lang.String)
comment7.text=\n\ This\ feature\ of\ James\ Pede\ designed\ testers\ works\ in\ cooperation\n\ with\ subtestResults\ and\ process()\ to\ split\ a\ regular\ @Test\n\ into\ several\ subtests.\ \ This\ normally\ can't\ be\ done\ because\n\ any\ Assert.failure\ that\ occurs\ within\ a\ subtest\ aborts\ the\ whole\ test.\n\ The\ usage\ syntax\ of\ subtest()\ is\ as\ follows\:\n\ \ \ \ \ \ subtest("nameOfMethodAppearingInTheTestModule)\n\ \ \ \ \ \ \ \ \ \ .process(parameter1OfSubTest,\ parameter2OfSubTest,\ etc)\n
comment8.params=parameters
comment8.target=Assignment2Tester\ process(java.lang.Object[])
comment8.text=\n\ This\ method\ is\ called\ AFTER\ subtest()\ to\ specify\n\ a\ set\ of\ parameters\ to\ the\ prepared\ subtest.\n\ The\ subtest\ then\ calls\ your\ project's\ methods,\n\ and\ any\ exceptions\ in\ the\ project,\ or\ failures\ of\ tests,\n\ become\ caught\ and\ examined\ here.\ \ Any\ caught\ failure\n\ is\ stored\ to\ a\ String\ and\ revisited\ when\ the\ overarching\n\ test\ concludes.\n
comment9.params=
comment9.target=void\ verifyNoOutput()
comment9.text=\n\ Call\ this\ function\ to\ assert\ that\ a\ student's\ method\n\ did\ not\ produce\ console\ output\ (standard\ screen\ text).\n
numComments=66
